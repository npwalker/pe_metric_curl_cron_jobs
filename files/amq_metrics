#!/opt/puppetlabs/puppet/bin/ruby

require "net/https"
require "json"
require "uri"
require 'time'
require 'optparse'
require 'yaml'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: amq_metrics [options]"

  opts.on('-p', '--print', 'Print to stdout') { |v| options[:print] = true }
  opts.on('-f', '--[no-]file', 'Store output to a file') { |v| options[:file] = v }
  opts.on('-m [TYPE]', '--metrics_type [TYPE]', 'Type of metric to collect') { |v| options[:metrics_type] = v }
end.parse!

if options[:metrics_type].nil? then
  STDERR.puts '--metrics_type (-m) is a required argument'
  exit 1
end

METRICS_TYPE = options[:metrics_type]
config = YAML.load_file(File.join(File.dirname(File.expand_path(__FILE__)),"#{METRICS_TYPE}_config.yaml"))

OUTPUT_DIR = config['output_dir']
HOSTS      = config['hosts']
PORT       = config['metrics_port']
METRICS    = config['additional_metrics']
CLIENTCERT = config['clientcert']

POST_DATA = METRICS.to_json

def recurse_merge!(a,b)
  a.merge!(b) do |_,aa,bb|
    (aa.is_a?(Hash) && bb.is_a?(Hash)) ? recurse_merge!(aa,bb) : bb
  end
end

def tree_components(string)
  attributes = string.split(/[:,]/).map { |e| e.split('=').last }
  components = [attributes.shift]
  until attributes.empty?
    components << attributes.pop
    components << attributes.shift
  end
  components.compact
end

def treeify(mbean, attribute_values)
  components = tree_components(mbean)
  components.reverse.inject(attribute_values) { |a, n| { n => a } }
end

$error_array = []

def get_endpoint(url, post_data)
  uri  = URI.parse(url)
  http = Net::HTTP.new(uri.host, uri.port)
  request = Net::HTTP::Post.new(uri.request_uri)
  request.basic_auth("admin", "admin")
  request.body = post_data
  data = http.request(request)
rescue Exception => e
    $error_array << "#{e}"
    data = {}
end

filename = Time.now.utc.strftime('%Y%m%dT%H%M%SZ') + '.json'

HOSTS.each do |host|
  begin
    timestamp = Time.now
    dataset = {'timestamp' => timestamp.utc.iso8601, 'servers' => {}}
    hostkey = host.gsub('.', '-')
    dataset['servers'][hostkey] = {METRICS_TYPE => {}}

    host_url = "https://#{host}:#{PORT}/api/jolokia"
    response = get_endpoint(host_url, POST_DATA)

    JSON.parse(response.body).each do |element|
      case element['value']
      when Hash
        element['value'].each do |mbean,attributes|
          metrics = treeify(mbean, attributes)
          recurse_merge!(dataset['servers'][hostkey][METRICS_TYPE], metrics)
        end
      else
        req = element['request']
        metrics = treeify(req['mbean'], { req['attribute'] => req['value'] })
        recurse_merge!(dataset['servers'][hostkey][METRICS_TYPE], metrics)
      end
    end

    dataset['servers'][hostkey][METRICS_TYPE]['error'] = $error_array
    dataset['servers'][hostkey][METRICS_TYPE]['error_count'] = $error_array.count
    dataset['servers'][hostkey][METRICS_TYPE]['api-query-start'] = timestamp.utc.iso8601
    dataset['servers'][hostkey][METRICS_TYPE]['api-query-duration'] = Time.now - timestamp

    json_dataset = JSON.pretty_generate(dataset)

    if options[:file] != false then
      Dir.chdir(OUTPUT_DIR) do
        Dir.mkdir(host) unless File.exist?(host)
        File.open(File.join(host, filename), 'w') do |file|
          file.write(json_dataset)
        end
      end
    end
    if options[:print] == true then
      STDOUT.write(json_dataset)
    end
  rescue Exception => e
    STDERR.puts "Error getting metrics for #{host}: #{e}"
  end
end
