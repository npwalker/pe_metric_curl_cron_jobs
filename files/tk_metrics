#!/opt/puppetlabs/puppet/bin/ruby

require "net/https"
require "json"
require "uri"
require 'time'
require 'optparse'
require 'yaml'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: tk_metrics [options]"

  opts.on('-p', '--print', 'Print to stdout') { |v| options[:print] = true }
  opts.on('-f', '--[no-]file', 'Store output to a file') { |v| options[:file] = v }
  opts.on('-m [TYPE]', '--metrics_type [TYPE]', 'Type of metric to collect') { |v| options[:metrics_type] = v }
end.parse!

if options[:metrics_type].nil? then
  STDERR.puts '--metrics_type (-m) is a required argument'
  exit 1
end

METRICS_TYPE = options[:metrics_type]
config = YAML.load_file(File.join(File.dirname(File.expand_path(__FILE__)),"#{METRICS_TYPE}_config.yaml"))

OUTPUT_DIR = config['output_dir']
HOSTS      = config['hosts']
PORT       = config['metrics_port']
METRICS    = config['additional_metrics']
CLIENTCERT = config['clientcert']

$error_array = []

def get_endpoint(url)
  uri  = URI.parse(url)
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = true
  http.cert = OpenSSL::X509::Certificate.new(File.read("/etc/puppetlabs/puppet/ssl/certs/#{CLIENTCERT}.pem"))
  http.key  = OpenSSL::PKey::RSA.new(File.read("/etc/puppetlabs/puppet/ssl/private_keys/#{CLIENTCERT}.pem"))
  http.ca_file = '/etc/puppetlabs/puppet/ssl/certs/ca.pem'
  http.verify_mode = OpenSSL::SSL::VERIFY_NONE
  data = JSON.parse(http.get(uri.request_uri).body)
rescue Exception => e
    $error_array << "#{e}"
    data = {}
end

def post_endpoint(url,post_data)
  uri  = URI.parse(url)
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = true
  http.cert = OpenSSL::X509::Certificate.new(File.read("/etc/puppetlabs/puppet/ssl/certs/#{CLIENTCERT}.pem"))
  http.key  = OpenSSL::PKey::RSA.new(File.read("/etc/puppetlabs/puppet/ssl/private_keys/#{CLIENTCERT}.pem"))
  http.ca_file = '/etc/puppetlabs/puppet/ssl/certs/ca.pem'
  http.verify_mode = OpenSSL::SSL::VERIFY_NONE

  request = Net::HTTP::Post.new(uri.request_uri)
  request.content_type = 'application/json'
  request.body = post_data

  data = JSON.parse(http.request(request).body)
rescue Exception => e
    $error_array << "#{e}"
    data = {}
end

filename = Time.now.utc.strftime('%Y%m%dT%H%M%SZ') + '.json'

HOSTS.each do |host|
  begin
    timestamp = Time.now
    dataset = {'timestamp' => timestamp.utc.iso8601, 'servers' => {}}
    hostkey = host.gsub('.', '-')

    host_url = "https://#{host}:#{PORT}"

    status_endpoint = "#{host_url}/status/v1/services?level=debug"
    status_output   = get_endpoint(status_endpoint)
    dataset['servers'][hostkey] = {METRICS_TYPE => status_output}

    post_data = []

    unless METRICS.empty? then
      METRICS.each do |metric|
        post_data << metric['url']
      end

      endpoint = "#{host_url}/metrics/v1/mbeans"
      metrics_output = post_endpoint(endpoint, post_data.to_json)

      METRICS.each_index do |index|
        metric_name = METRICS[index]['name']
        metric_data = metrics_output[index]

        dataset['servers'][hostkey][METRICS_TYPE][metric_name] = metric_data
      end
    end

    dataset['servers'][hostkey][METRICS_TYPE]['error'] = $error_array
    dataset['servers'][hostkey][METRICS_TYPE]['error_count'] = $error_array.count
    dataset['servers'][hostkey][METRICS_TYPE]['api-query-start'] = timestamp.utc.iso8601
    dataset['servers'][hostkey][METRICS_TYPE]['api-query-duration'] = Time.now - timestamp

    json_dataset = JSON.pretty_generate(dataset)

    if options[:file] != false then
      Dir.chdir(OUTPUT_DIR) do
        Dir.mkdir(host) unless File.exist?(host)
        File.open(File.join(host, filename), 'w') do |file|
          file.write(json_dataset)
        end
      end
    end
    if options[:print] == true then
      STDOUT.write(json_dataset)
    end
  end
end
