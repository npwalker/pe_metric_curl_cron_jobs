#!/opt/puppetlabs/puppet/bin/ruby

require "net/https"
require "json"
require "uri"
require 'time'
require 'optparse'
require 'yaml'

#===========================================================================#
# BUILD CONFIGURATION OPTIONS                                               #
#===========================================================================#

# Define the list of mandatory options that must be specified on the CLI
REQUIRED_FLAGS = {
  metrics_type: { type: :string },
}

# Define the list of options that will be read from the config file, and which
# may optionally be specified on the CLI.
SETTINGS = {
  output_dir:   { type: :string, default: false }, # false = disabled
  hosts:        { type: :list },
  metrics:      { type: :list },
  metrics_port: { type: :string },
  clientcert:   { type: :string },
  pe_version:   { type: :string },
  print:        { type: :boolean, default: true },
  ssl:          { type: :boolean, default: true },
}

config = { }

OptionParser.new do |opts|
  opts.banner = "Usage: tk_metrics [options]"

  # Gather options
  REQUIRED_FLAGS.merge(SETTINGS).each do |opt,attrs|
    case attrs[:type]
    when :string, nil
      opts.on("--#{opt} ARG", '(no description)')  { |arg| config[opt] = arg }
    when :boolean
      opts.on("--[no-]#{opt}", '(no description)') { |arg| config[opt] = arg }
    when :list
      opts.on("--#{opt} ARG", '(no description)')  { |arg| config[opt] = arg.split(',') }
    end
  end

end.parse!

REQUIRED_FLAGS.each_key do |opt|
  !config[opt].nil? || raise("ERROR: Missing configuration option \"#{opt}\"")
end

begin
  file = File.join(File.dirname(File.expand_path(__FILE__)),"#{config[:metrics_type]}_config.yaml")
  file_config = YAML.load_file(file)
rescue Exception => e
  STDERR.puts "ERROR: unable to read configuration file from #{file}: #{e}"
  exit 1
end

# For the options which MAY be read from a config file, retrieve those values
# if they have not been specified during invocation. Values specified on the
# command line are given precedence.
SETTINGS.each do |opt,attrs|
  possibilities = [config[opt], file_config[opt], attrs[:default]]
  config[opt] = possibilities.find {|p| !p.nil? }
  raise("ERROR: Missing configuration option \"#{opt}\"") if config[opt].nil?
end

#===========================================================================#
# MAIN SCRIPT LOGIC                                                         #
#===========================================================================#

$error_array = []

def setup_connection(url, ssl)
  uri  = URI.parse(url)
  http = Net::HTTP.new(uri.host, uri.port)
  if ssl then
    http.use_ssl = true
    http.verify_mode = OpenSSL::SSL::VERIFY_NONE
  end

  return http,uri
end

def get_endpoint(url,ssl)
  http,uri = setup_connection(url,ssl)

  data = JSON.parse(http.get(uri.request_uri).body)
rescue Exception => e
    $error_array << "#{e}"
    data = {}
end

def post_endpoint(url,post_data,ssl)
  http,uri = setup_connection(url,ssl)

  request = Net::HTTP::Post.new(uri.request_uri)
  request.content_type = 'application/json'
  request.body = post_data

  data = JSON.parse(http.request(request).body)
rescue Exception => e
    $error_array << "#{e}"
    data = {}
end

def generate_host_url(host, port, ssl)
  if ssl then
    protocol = 'https'
  else
    protocol = 'http'
  end

  host_url = "#{protocol}://#{host}:#{port}"
end

def get_status_endpoint(host, port, ssl)
  host_url = generate_host_url(host, port, ssl)

  status_endpoint = "#{host_url}/status/v1/services?level=debug"
  status_output   = get_endpoint(status_endpoint,ssl)
end

def bulk_retrieve_additional_metrics(host, port, metrics, ssl)
  host_url = generate_host_url(host, port, ssl)

  post_data = []
  metrics.each do |metric|
    post_data << metric['url']
  end

  endpoint = "#{host_url}/metrics/v1/mbeans"
  metrics_output = post_endpoint(endpoint, post_data.to_json, ssl)
  metrics_array = []

  metrics.each_index do |index|
    metric_name = metrics[index]['name']
    metric_data = metrics_output[index]

    metrics_array << { 'name' => metric_name,
                       'data' => metric_data  }
  end

  return metrics_array
end

def individually_retrieve_additional_metrics(host, port, metrics, ssl)
  host_url = generate_host_url(host, port, ssl)

  metrics_array = []
  metrics.each do |metric|
    endpoint = URI.escape("#{host_url}/metrics/v1/mbeans/#{metric['url']}")
    metrics_array <<  { 'name' => metric['name'],
                        'data' => get_endpoint(endpoint, ssl) }
  end

  return metrics_array
end

def retrieve_additional_metrics(host,port,metrics,pe_version, ssl)
  if Gem::Version.new(pe_version) < Gem::Version.new('2016.2.0') then
    metrics_array = individually_retrieve_additional_metrics(host, port, metrics, ssl)
  else
    metrics_array = bulk_retrieve_additional_metrics(host, port, metrics, ssl)
  end

  return metrics_array
end

filename = Time.now.utc.strftime('%Y%m%dT%H%M%SZ') + '.json'

config[:hosts].each do |host|
  begin
    timestamp = Time.now
    dataset = {'timestamp' => timestamp.utc.iso8601, 'servers' => {}}
    hostkey = host.gsub('.', '-')

    status_output   = get_status_endpoint(host, config[:metrics_port], config[:ssl])
    dataset['servers'][hostkey] = {config[:metrics_type] => status_output}

    unless config[:metrics].empty? then
      metrics_array = retrieve_additional_metrics(host, config[:metrics_port], config[:metrics], config[:pe_version], config[:ssl])

      metrics_array.each do |metric_hash|
        metric_name = metric_hash['name']
        metric_data = metric_hash['data']

        dataset['servers'][hostkey][config[:metrics_type]][metric_name] = metric_data
      end
    end

    dataset['servers'][hostkey][config[:metrics_type]]['error'] = $error_array
    dataset['servers'][hostkey][config[:metrics_type]]['error_count'] = $error_array.count
    dataset['servers'][hostkey][config[:metrics_type]]['api-query-start'] = timestamp.utc.iso8601
    dataset['servers'][hostkey][config[:metrics_type]]['api-query-duration'] = Time.now - timestamp

    json_dataset = JSON.pretty_generate(dataset)

    unless config[:output_dir] == false then
      Dir.chdir(config[:output_dir]) do
        Dir.mkdir(host) unless File.exist?(host)
        File.open(File.join(host, filename), 'w') do |file|
          file.write(json_dataset)
        end
      end
    end
    if config[:print] != false then
      STDOUT.write(json_dataset)
    end
  end
end
